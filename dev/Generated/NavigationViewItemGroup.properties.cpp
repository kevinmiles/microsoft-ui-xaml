// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "NavigationViewItemGroup.h"

CppWinRTActivatableClassWithDPFactory(NavigationViewItemGroup)

GlobalDependencyProperty NavigationViewItemGroupProperties::s_IconProperty{ nullptr };
GlobalDependencyProperty NavigationViewItemGroupProperties::s_IsExpandedProperty{ nullptr };
GlobalDependencyProperty NavigationViewItemGroupProperties::s_MenuItemsProperty{ nullptr };
GlobalDependencyProperty NavigationViewItemGroupProperties::s_MenuItemsSourceProperty{ nullptr };

NavigationViewItemGroupProperties::NavigationViewItemGroupProperties()
{
    EnsureProperties();
}

void NavigationViewItemGroupProperties::EnsureProperties()
{
    NavigationViewItemBase::EnsureProperties();
    if (!s_IconProperty)
    {
        s_IconProperty =
            InitializeDependencyProperty(
                L"Icon",
                winrt::name_of<winrt::IconElement>(),
                winrt::name_of<winrt::NavigationViewItemGroup>(),
                false /* isAttached */,
                ValueHelper<winrt::IconElement>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_IsExpandedProperty)
    {
        s_IsExpandedProperty =
            InitializeDependencyProperty(
                L"IsExpanded",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::NavigationViewItemGroup>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_MenuItemsProperty)
    {
        s_MenuItemsProperty =
            InitializeDependencyProperty(
                L"MenuItems",
                winrt::name_of<winrt::IVector<winrt::IInspectable>>(),
                winrt::name_of<winrt::NavigationViewItemGroup>(),
                false /* isAttached */,
                ValueHelper<winrt::IVector<winrt::IInspectable>>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_MenuItemsSourceProperty)
    {
        s_MenuItemsSourceProperty =
            InitializeDependencyProperty(
                L"MenuItemsSource",
                winrt::name_of<winrt::IInspectable>(),
                winrt::name_of<winrt::NavigationViewItemGroup>(),
                false /* isAttached */,
                ValueHelper<winrt::IInspectable>::BoxedDefaultValue(),
                nullptr);
    }
}

void NavigationViewItemGroupProperties::ClearProperties()
{
    s_IconProperty = nullptr;
    s_IsExpandedProperty = nullptr;
    s_MenuItemsProperty = nullptr;
    s_MenuItemsSourceProperty = nullptr;
    NavigationViewItemBase::ClearProperties();
}

void NavigationViewItemGroupProperties::Icon(winrt::IconElement const& value)
{
    static_cast<NavigationViewItemGroup*>(this)->SetValue(s_IconProperty, ValueHelper<winrt::IconElement>::BoxValueIfNecessary(value));
}

winrt::IconElement NavigationViewItemGroupProperties::Icon()
{
    return ValueHelper<winrt::IconElement>::CastOrUnbox(static_cast<NavigationViewItemGroup*>(this)->GetValue(s_IconProperty));
}

void NavigationViewItemGroupProperties::IsExpanded(bool value)
{
    static_cast<NavigationViewItemGroup*>(this)->SetValue(s_IsExpandedProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
}

bool NavigationViewItemGroupProperties::IsExpanded()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<NavigationViewItemGroup*>(this)->GetValue(s_IsExpandedProperty));
}

void NavigationViewItemGroupProperties::MenuItems(winrt::IVector<winrt::IInspectable> const& value)
{
    static_cast<NavigationViewItemGroup*>(this)->SetValue(s_MenuItemsProperty, ValueHelper<winrt::IVector<winrt::IInspectable>>::BoxValueIfNecessary(value));
}

winrt::IVector<winrt::IInspectable> NavigationViewItemGroupProperties::MenuItems()
{
    return ValueHelper<winrt::IVector<winrt::IInspectable>>::CastOrUnbox(static_cast<NavigationViewItemGroup*>(this)->GetValue(s_MenuItemsProperty));
}

void NavigationViewItemGroupProperties::MenuItemsSource(winrt::IInspectable const& value)
{
    static_cast<NavigationViewItemGroup*>(this)->SetValue(s_MenuItemsSourceProperty, ValueHelper<winrt::IInspectable>::BoxValueIfNecessary(value));
}

winrt::IInspectable NavigationViewItemGroupProperties::MenuItemsSource()
{
    return ValueHelper<winrt::IInspectable>::CastOrUnbox(static_cast<NavigationViewItemGroup*>(this)->GetValue(s_MenuItemsSourceProperty));
}
