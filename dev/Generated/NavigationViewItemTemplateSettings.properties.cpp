// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "NavigationViewItemTemplateSettings.h"

CppWinRTActivatableClassWithDPFactory(NavigationViewItemTemplateSettings)

GlobalDependencyProperty NavigationViewItemTemplateSettingsProperties::s_CompactWidthProperty{ nullptr };
GlobalDependencyProperty NavigationViewItemTemplateSettingsProperties::s_IsChildSelectedProperty{ nullptr };

NavigationViewItemTemplateSettingsProperties::NavigationViewItemTemplateSettingsProperties()
{
    EnsureProperties();
}

void NavigationViewItemTemplateSettingsProperties::EnsureProperties()
{
    if (!s_CompactWidthProperty)
    {
        s_CompactWidthProperty =
            InitializeDependencyProperty(
                L"CompactWidth",
                winrt::name_of<double>(),
                winrt::name_of<winrt::NavigationViewItemTemplateSettings>(),
                false /* isAttached */,
                ValueHelper<double>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_IsChildSelectedProperty)
    {
        s_IsChildSelectedProperty =
            InitializeDependencyProperty(
                L"IsChildSelected",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::NavigationViewItemTemplateSettings>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxedDefaultValue(),
                nullptr);
    }
}

void NavigationViewItemTemplateSettingsProperties::ClearProperties()
{
    s_CompactWidthProperty = nullptr;
    s_IsChildSelectedProperty = nullptr;
}

void NavigationViewItemTemplateSettingsProperties::CompactWidth(double value)
{
    static_cast<NavigationViewItemTemplateSettings*>(this)->SetValue(s_CompactWidthProperty, ValueHelper<double>::BoxValueIfNecessary(value));
}

double NavigationViewItemTemplateSettingsProperties::CompactWidth()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<NavigationViewItemTemplateSettings*>(this)->GetValue(s_CompactWidthProperty));
}

void NavigationViewItemTemplateSettingsProperties::IsChildSelected(bool value)
{
    static_cast<NavigationViewItemTemplateSettings*>(this)->SetValue(s_IsChildSelectedProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
}

bool NavigationViewItemTemplateSettingsProperties::IsChildSelected()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<NavigationViewItemTemplateSettings*>(this)->GetValue(s_IsChildSelectedProperty));
}
